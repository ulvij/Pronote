name: Distribute

on:
  push:
    branches: [dev]

jobs:
  distribute:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'

      - name: Cache Ruby - Bundler
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Cache Gradle
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches/
          key: cache-clean-gradle-${{ matrix.os }}-${{ matrix.jdk }}

      - name: Cache Gradle Wrapper
        uses: actions/cache@v1
        with:
          path: ~/.gradle/wrapper/
          key: cache-clean-wrapper-${{ matrix.os }}-${{ matrix.jdk }}

      - name: Grant Permission to Execute
        run: chmod +x gradlew

      - name: Install bundle
        run: |
          gem install bundler
          gem update bundler
          bundle install --without development --jobs 4 --retry 3

      - name: Configure Keystore
        run: |
          echo "$ANDROID_KEYSTORE_FILE" > keystore.b64
          base64 -d -i keystore.b64 > app/keystore.jks
          echo "storeFile=keystore.jks" >>keystore.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >>keystore.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >>keystore.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >>keystore.properties
        env:
          ANDROID_KEYSTORE_FILE: ${{secrets.ANDROID_KEYSTORE_FILE}}
          KEYSTORE_KEY_ALIAS: ${{secrets.KEYSTORE_KEY_ALIAS}}
          KEYSTORE_KEY_PASSWORD: ${{secrets.KEYSTORE_KEY_PASSWORD}}
          KEYSTORE_STORE_PASSWORD: ${{secrets.KEYSTORE_STORE_PASSWORD}}

      - name: Create Firebase Service Credentials file
        run: |
          echo "$FIREBASE_CREDENTIALS" > firebase_credentials.b64
          base64 -d -i firebase_credentials.b64 > firebase_credentials.json
        env:
          FIREBASE_CREDENTIALS: ${{secrets.FIREBASE_CREDENTIALS}}

      - name: Create Google Services Json file
        run: |
          echo "$GOOGLE_SERVICES" > google-services.b64
          base64 -d -i google-services.b64 > google-services.json
        env:
          GOOGLE_SERVICES: ${{secrets.GOOGLE_SERVICES_JSON_FILE}}

      - name: Distribute app with App Distribution ðŸš€
        run: bundle exec fastlane distribute
        env:
          PRONOTE_FIREBASE_APP_ID: ${{secrets.PRONOTE_FIREBASE_APP_ID}}